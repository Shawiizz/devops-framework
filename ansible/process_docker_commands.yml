- name: Build decomposerize options
  set_fact:
    decomposerize_options: "{{ cmd_type.base_options }} {{ services_option }} {{ environmentize_option }} --ansible-env-vars-format"
  changed_when: false

- name: Generate {{ cmd_type.name }} commands as template
  shell: decomposerize "{{ compose_path }}" {{ decomposerize_options }} > {{ tmp_dir }}/decomposerize_{{ cmd_type.name }}.j2
  delegate_to: localhost
  changed_when: false

- name: Render template with evaluated variables
  template:
    src: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}.j2"
    dest: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}_rendered.sh"
  delegate_to: localhost
  changed_when: false

- name: Get rendered commands
  slurp:
    src: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}_rendered.sh"
  delegate_to: localhost
  register: rendered_script
  changed_when: false

- name: Split script into commands
  set_fact:
    current_commands: >-
      {{
        rendered_script.content
        | b64decode
        | split('\n')
        | map('trim')
        | select('truthy')
        | list
      }}
  changed_when: false

- name: Execute commands on target host
  shell: "( {{ item }} ) > /dev/null 2>&1"
  loop: "{{ current_commands }}"
  loop_control:
    label: >-
      {{
        (
          (item | regex_search('^docker\s+run'))
          and ('Running ' ~ ((item | regex_search('(?<=--name )\S+')) | default('container', true)) ~ ' container')
        )
        or (
          (item | regex_search('^docker\s+stop'))
          and ('Stopping ' ~ ((item | regex_search('(?<=^docker\s+stop\s+)\S+')) | default('container', true)) ~ ' container')
        )
        or (
          (item | regex_search('^docker\s+rm'))
          and ('Removing ' ~ ((item | regex_search('(?<=^docker\s+rm\s+)\S+')) | default('container', true)) ~ ' container')
        )
        or (
          (item | regex_search('^docker\s+rmi'))
          and ('Removing images for ' ~ ((item | regex_search('(?<=docker\s+images\s+)\S+')) | default('repository', true)))
        )
        or (
          (item | regex_search('^docker\s+pull'))
          and ('Pulling ' ~ ((item | regex_search('(?<=^docker\s+pull\s+)\S+')) | default('image', true)))
        )
        or 'Running docker command'
      }}
  when: current_commands is defined and current_commands | length > 0
  failed_when: false
  ignore_errors: "{{ cmd_type.ignore_errors }}"
  register: command_results
  changed_when: command_results.rc == 0

- name: Show generic failure message for failed commands
  debug:
    msg: "Failed to run command"
  loop: "{{ command_results.results | default([]) }}"
  loop_control:
    label: "{{ (item.item | default('')) | regex_replace('\\n', ' ') | truncate(120, true, '...') }}"
  when:
    - item.rc is defined and item.rc != 0
    - not (cmd_type.ignore_errors | bool)
  changed_when: false
